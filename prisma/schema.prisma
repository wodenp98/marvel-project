generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  userDatabase  UserDatabase[]
}


model heroes {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  classhero  String 
  imageUrl   String
  name       String
  stars      Int
}

model UserDatabase {
  id         String            @id @default(auto()) @map("_id") @db.ObjectId
  userId     String            @db.ObjectId
  user       User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userDashboard UserDashboard[]
}

model UserDashboard {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userDatabaseId String       @db.ObjectId
  userDatabase UserDatabase   @relation(fields: [userDatabaseId], references: [id], onDelete: Cascade)
  classhero  String
  imageUrl   String
  name       String
  indice     Int
  stars      String
  rank       String
  cs         Int

}